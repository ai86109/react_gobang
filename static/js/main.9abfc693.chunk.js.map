{"version":3,"sources":["components/App/Board.js","components/App/GameInfo.js","components/App/App.js","components/globalStyle.js","index.js"],"names":["BoardContainer","styled","div","BoardRow","BoardBlock","BlackStone","WhiteStone","Board","board","handlePlaceStone","currentPlayerColor","map","boardrow","y","_","x","onClick","GameInfoBlock","SetNewGameButton","button","NextPlayer","PlayerStatus","winner","count","status","current","GameInfo","handleSetNewGame","Game","App","useState","Array","fill","setBoard","blackIsNext","setBlackIsNext","setWinner","useRef","checkFiveInARow","clickedX","clickedY","directionX","directionY","currentX","currentY","buildARowLength","newBoard","JSON","parse","stringify","calculateWinner","ResetStyle","createGlobalStyle","GlobalStyle","ReactDOM","render","className","style","background","height","document","getElementById"],"mappings":"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","file":"static/js/main.9abfc693.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst BoardContainer = styled.div`\n  background: rgba(216, 170, 105, 0.7);\n  border: 3px solid rgba(0, 0, 0, 0.5);\n  box-shadow: 3px 3px 5px rgba(0, 0, 0, 0.7);\n  padding: 10px;\n`;\n\nconst BoardRow = styled.div`\n  display: flex;\n  position: relative;\n`;\n\nconst BoardBlock = styled.div`\n  height: 30px;\n  width: 30px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background: transparent;\n  cursor: pointer;\n  &:before {\n    content: '';\n    height: 30px;\n    border-left: 1px solid black;\n    position: absolute;\n  }\n  &:after {\n    content: '';\n    width: 30px;\n    border-top: 1px solid black;\n    position: absolute;\n  }\n`;\n\nconst BlackStone = styled.div`\n  background: black;\n  border: 1px solid black;\n  border-radius: 50%;\n  height: 20px;\n  width: 20px;\n  box-shadow: 3px 3px 5px rgba(0, 0, 0, 0.7);\n  z-index: 1;\n`;\n\nconst WhiteStone = styled.div`\n  background: white;\n  border: 1px solid white;\n  border-radius: 50%;\n  height: 20px;\n  width: 20px;\n  box-shadow: 3px 3px 5px rgba(0, 0, 0, 0.7);\n  z-index: 1;\n`;\n\nexport default function Board({board, handlePlaceStone, currentPlayerColor}) {\n  return (\n    <BoardContainer>\n      {board.map((boardrow, y) => (\n        <BoardRow key={y}>\n          {boardrow.map((_, x) => (\n            <BoardBlock \n              key={x}\n              onClick={() => handlePlaceStone(x, y, currentPlayerColor)}\n            >\n              {board[y][x] === 'black' ? <BlackStone /> : (board[y][x] === 'white' ? <WhiteStone /> : '')}\n            </BoardBlock>\n          ))}\n        </BoardRow>\n      ))}\n    </BoardContainer>\n  )\n}","import React from 'react';\nimport styled from 'styled-components';\n\nconst GameInfoBlock = styled.div`\n  display: flex;\n  justify-content: space-between;\n  padding: 10px 10px;\n  background: rgba(158, 200, 224, 0.7);\n`;\n\nconst SetNewGameButton = styled.button`\n  border: 1px solid rgba(0, 0, 0, 0.5);\n  box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.7);\n  background: rgb(212, 160, 164);\n  padding: 5px 10px;\n  cursor: pointer;\n`;\n\nconst NextPlayer = styled.div`\n  font-size: 30px;\n  color: rgba(0, 0, 0, 0.7);\n`;\n\nfunction PlayerStatus({winner, currentPlayerColor, count}) {\n  let status = ''\n  if(winner) {\n    status = `Winner is : ${winner}`\n  } else if(count.current >= 361) {\n    status = `Fair Game !`\n  } else {\n    status = `Next is : ${currentPlayerColor}`\n  }\n  return (\n    <NextPlayer>{status}</NextPlayer>\n  )\n}\n\nexport default function GameInfo({winner, handleSetNewGame, currentPlayerColor, count}) {\n  return (\n    <GameInfoBlock>\n      <PlayerStatus winner={winner} currentPlayerColor={currentPlayerColor} count={count} />\n      <SetNewGameButton onClick={handleSetNewGame}>New Game</SetNewGameButton>\n    </GameInfoBlock>\n  )\n}","import React, { useState, useRef } from 'react';\nimport styled from 'styled-components';\nimport Board from './Board';\nimport GameInfo from './GameInfo'\n\nconst Game = styled.div`\n  margin: 0 auto;\n  width: 570px;\n  padding: 10px 0;\n`;\n\nfunction App() {\n  const [board, setBoard] = useState(Array(19).fill(Array(19).fill(null)));\n  const [blackIsNext, setBlackIsNext] = useState(true)\n  const [winner, setWinner] = useState(null)\n  const boardSize = 19\n  const currentPlayerColor = blackIsNext ? 'black' : 'white'\n  // count 用來判斷是否和局\n  const count = useRef(0)\n\n  const handleSetNewGame = () => {\n    setBoard(Array(19).fill(Array(19).fill(null)))\n    setBlackIsNext(true)\n    setWinner(null)\n  }\n\n  function checkFiveInARow(clickedX, clickedY, directionX, directionY) {\n    let currentX = clickedX\n    let currentY = clickedY\n    let buildARowLength = 0\n    \n    do {\n      currentX += directionX\n      currentY += directionY\n\n      if(\n        currentX >= 0 &&\n        currentY >= 0 &&\n        currentX < boardSize &&\n        currentY < boardSize &&\n        board[currentY][currentX] === (blackIsNext ? 'black' : 'white')\n      ) {\n        buildARowLength += 1\n      } else {\n        break\n      }\n    } while (true)\n    return buildARowLength\n  }\n\n  function calculateWinner(x, y, currentPlayerColor) {\n    if(\n      checkFiveInARow(x, y, 1, 0) + checkFiveInARow(x, y, -1, 0) >=4 ||\n      checkFiveInARow(x, y, 0, 1) + checkFiveInARow(x, y, 0, -1) >= 4 ||\n      checkFiveInARow(x, y, 1, 1) + checkFiveInARow(x, y, -1, -1) >= 4 ||\n      checkFiveInARow(x, y, 1, -1) + checkFiveInARow(x, y, -1, 1) >= 4\n    ) {\n      return currentPlayerColor\n    }\n    return null\n  }\n\n  const handlePlaceStone = (x, y, currentPlayerColor) => {\n    if(winner || board[y][x] || count.current >= 361) return\n    const newBoard = JSON.parse(JSON.stringify(board))\n    newBoard[y][x] = currentPlayerColor\n    setBoard(newBoard)\n    if(calculateWinner(x, y, currentPlayerColor)) {\n      setWinner(currentPlayerColor)\n      return\n    }\n    setBlackIsNext(!blackIsNext)\n    count.current += 1\n  }\n\n  return (\n    <Game>\n      <GameInfo \n        winner={winner}\n        handleSetNewGame={handleSetNewGame}\n        currentPlayerColor={currentPlayerColor} \n        count={count}\n      />\n      <Board \n        board={board}\n        handlePlaceStone={handlePlaceStone}\n        currentPlayerColor={currentPlayerColor} \n      />\n    </Game>\n  );\n}\n\nexport default App;\n","import { createGlobalStyle } from \"styled-components\";\n\nexport const ResetStyle = createGlobalStyle`\nhtml, body, div, span, applet, object, iframe, h1, h2, h3, h4, h5, h6, p, blockquote, pre, a, abbr, acronym, address, big, cite, code, del, dfn, em, img, ins, kbd, q, s, samp, small, strike, strong, sub, sup, tt, var, b, u, i, center, dl, dt, dd, ol, ul, li, fieldset, form, label, legend, table, caption, tbody, tfoot, thead, tr, th, td, article, aside, canvas, details, embed, figure, figcaption, footer, header, hgroup, menu, nav, output, ruby, section, summary, time, mark, audio, video {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: baseline;\n  box-sizing: border-box;\n}\naddress, caption, cite, code, dfn, em, strong, th, var, b {\n  font-weight: normal;\n  font-style: normal;\n}\nabbr, acronym {\n  border: 0;\n}\narticle, aside, details, figcaption, figure, footer, header, hgroup, menu, nav, section {\n  display: block;\n}\n*,\n*::after,\n*::before {\n  margin: 0;\n  padding: 0;\n  box-sizing: inherit;\n}\nhtml {\n  text-size-adjust: 100%;\n  box-sizing: border-box;\n}\nbody {\n    line-height: 1;\n}\nol, ul {\n  list-style: none;\n}\nblockquote, q {\n  quotes: none;\n}\nblockquote {\n  &:before,   &:after {\n    content: '';\n    content: none;\n  }\n}\nq {\n  &:before,   &:after {\n    content: '';\n    content: none;\n  }\n}\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\ncaption, th {\n  text-align: left;\n}\ntextarea {\n  resize: none;\n}\na {\n  text-decoration: none;\n  cursor: pointer;\n}\nbutton {\n  padding: 0;\n  border: none;\n  background: none;\n}\n`;\n\nexport const GlobalStyle = createGlobalStyle`\nhtml {\n  box-sizing: border-box;\n  font-size: 62.5%; \n  font-family: 'HelveticaNeue', Helvetica, Arial, 'Lucida Grande', sans-serif;\n}\n`;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App.js';\nimport {ResetStyle, GlobalStyle} from './components/globalStyle';\n\nconst boardBackground = {\n  background: 'rgba(0.2, 0.2, 0.2, 0.2)',\n  height: '1080px'\n}\n\nReactDOM.render(\n  <div className={App} style={boardBackground}>\n    <ResetStyle />\n    <GlobalStyle />\n    <App />\n  </div>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}